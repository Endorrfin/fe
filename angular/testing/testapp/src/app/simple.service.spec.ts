import { SimpleService } from './simple.service'
import { CheckValueService } from './check.value.service'


describe('Простой тест', () => {
  let service: SimpleService
  beforeEach(() => {
    service = new SimpleService(new CheckValueService()) // добавляем зависимость от checkValueService
  })

  it('должен создавать экземпляр класса', () => {
    expect(service).toBeTruthy() // функция expect проверяет, что класс у нас создался
  })

  it('должен суммировать два числа', () => {
    const sum = service.sum(1, 2)
    expect(sum).toBe(3)
  })

  it('должен возвращать undefined, если второго аргумента нет', () => {
    const sum = service.sum(1 )
    expect(sum).toBeUndefined()
  })


})


/*
* Команда для запуска теста - ng test
*
* ПРАВИЛА НАПИСАНИЯ SERVICES
* 1. DRY - не повторяйся
* 2. Сервисы должны быть изолированы. Код внутри теста должен быть только для тестирования текущего сервиса. Любые сторонние зависимости, к примеру, сторонние сервисы, компоненты, директивы и прочее, должны мокаться
*
*
* Каждый тест состоит из получения каких-либо данных путем запуска тестируемого кода и сверки их с ожиданиями.
* Сначало получаем какие-то данные, а потом функции expect подсовываем эти данные и проверяем, что они соответствуют каким-то нашим ожиданиям.
*
*
* Функция expect()
* expect(реальность).toBe(ожидания)
*
* Методы проверки ожиданий
* .toBe() - эквивалент тройного равенства
* .toEqual() - сравнивает объекты со сложной структурой
* .toBeDefined(), toBeUndefined() - проверяет значение на undefined
* .toBeTruthy() - проверяет логические значения
* .toBeFalsy - проверяет логические значения
*
* Функция beforeEach - запускается перед исполнением каждого теста. В нее помещаются разные функции, которые требуется выполнять не один раз.
*
* Что такое mock?
* Mock-объект представляет собой конкретную фиктивную реализацию интерфейса, предназначенную исключительно для тестирования взаимодействия и относительно которого высказывается утверждение.
* */



